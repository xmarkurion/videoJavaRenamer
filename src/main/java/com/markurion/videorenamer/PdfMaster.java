package com.markurion.videorenamer;

import com.itextpdf.text.*;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.time.Instant;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;

public class PdfMaster {
    private boolean state;

    private String optionalVideoTitle;
    private boolean videoNameBurnedOnVideo;
    private String pdfFileName;
    private String workingDirString;
    private ArrayList<String> oldNames;
    private ArrayList<String> newNames;


    private String formatedDate;

    private static final Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18, Font.BOLD);
    private static final Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL, BaseColor.RED);
    private static final Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16, Font.BOLD);
    private static final Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);

    private static Document document;

    public PdfMaster(String filename,
                     ArrayList<String> oldNames,
                     ArrayList<String> newNames,
                     String workingDirString)
    {
        this.document  = new Document();
        this.state = false;
        //this.workingDirString = System.getProperty("user.dir");
        this.workingDirString = workingDirString;
        this.pdfFileName = filename + ".pdf";
        this.optionalVideoTitle = null;
        this.videoNameBurnedOnVideo =false;

//        this.oldNames = oldNamesArray();
//        this.newNames = newNamesArray();
        this.oldNames = oldNames;
        this.newNames = newNames;

        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yy").withZone(ZoneId.systemDefault());
        Instant instant = Instant.now();
        this.formatedDate = formatter.format(instant);
    }

    public void setVideoNameBurnedOnVideo(boolean value){ this.videoNameBurnedOnVideo = value;}

    public void setOptionalVideoTitle(String optionalVideoTitle){
        this.optionalVideoTitle = optionalVideoTitle;
    }

    public boolean getState(){
        return state;
    }

    public void generatePDF() throws FileNotFoundException, DocumentException {
        PdfWriter.getInstance(document, new FileOutputStream(workingDirString + "\\" + pdfFileName));
        document.open();

        setPdfProperties();
        addTitlePage();
        createTable();

        document.close();
        this.state = true;
    }

    private void setPdfProperties() {
        document.addTitle("Renamed Videos");
        document.addSubject("List of videos renamed on " + this.formatedDate);
        document.addAuthor(System.getProperty("user.name"));
        document.addCreator("Markurion - Video renamer 2025");
    }

    private void addTitlePage() throws DocumentException {
        Paragraph pre = new Paragraph();
        pre.add(new Paragraph("Video renamed report", catFont));
        pre.add(new Paragraph(
                "Report generated by: " +
                        System.getProperty("user.name") +
                        ", on " + formatedDate, smallBold));

        boolean temp = optionalVideoTitle != null;
        String yesNo = (videoNameBurnedOnVideo) ? "YES" : "NO";
        pre.add(new Paragraph("File name's burned on top of the video: " + yesNo, smallBold));
        if (temp) {
            pre.add(new Paragraph("Global title burned on top of each video: " + optionalVideoTitle, smallBold));
        }
        document.add(pre);
    }

    private void createTable()
            throws DocumentException {

        Paragraph tableParagraph = new Paragraph();
        addEmptyLine(tableParagraph, 1);
        PdfPTable table = new PdfPTable(3);
        table.setWidths(new int[]{5, 35, 50});
        table.setWidthPercentage(100);
        table.setPaddingTop(1);

        // If you switch to Itext 7
        //https://stackoverflow.com/questions/41428364/itext-7-column-widths-why-do-these-not-fit


        // t.setBorderColor(BaseColor.GRAY);
        // t.setPadding(4);
        // t.setSpacing(4);
        // t.setBorderWidth(1);

        PdfPCell c1 = new PdfPCell(new Phrase("ID"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("Old Name"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("New Name"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        table.setHeaderRows(1);

        ArrayList<ArrayList<String>> lista = doubleArraylistNames();

        for (int x = 0; x < lista.get(0).size(); x++) {
            System.out.println(
                    "Old name: " + lista.get(0).get(x) +
                            " New name: " + lista.get(1).get(x)
            );

            table.addCell("" + x);
            table.addCell(lista.get(0).get(x));
            table.addCell(lista.get(1).get(x));
        }

        tableParagraph.add(table);
        document.add(tableParagraph);
    }

    private static void addEmptyLine(Paragraph paragraph, int number) {
        for (int i = 0; i < number; i++) {
            paragraph.add(new Paragraph(" "));
        }
    }

    private ArrayList<ArrayList<String>> doubleArraylistNames() {
        ArrayList<ArrayList<String>> names = new ArrayList<>();
            names.add(oldNames);
            names.add(newNames);
            return names;
    }


    private ArrayList<String> oldNamesArray() {
        ArrayList<String> oldnames = new ArrayList<>();
        oldnames.add("IPV000001.AVI");
        oldnames.add("IPV000002.AVI");
        oldnames.add("IPV0001232212321003.AVI");
        oldnames.add("IPV00002204.AVI");
        oldnames.add("IPV000001.AVI");
        oldnames.add("IPV000002.AVI");
        oldnames.add("IPV0001232212321003.AVI");
        oldnames.add("IPV00002204.AVI");
        oldnames.add("IPV000001.AVI");
        oldnames.add("IPV000002.AVI");
        oldnames.add("IPV0001232212321003.AVI");
        oldnames.add("IPV00002204.AVI");
        oldnames.add("IPV000001.AVI");
        oldnames.add("IPV000002.AVI");
        oldnames.add("IPV0001232212321003.AVI");
        oldnames.add("IPV00002204.AVI");
        oldnames.add("IPV000001.AVI");
        oldnames.add("IPV000002.AVI");
        oldnames.add("IPV0001232212321003.AVI");
        oldnames.add("IPV00002204.AVI");
        oldnames.add("IPV000001.AVI");
        oldnames.add("IPV000002.AVI");
        oldnames.add("IPV0001232212321003.AVI");
        oldnames.add("IPV00002204.AVI");
        oldnames.add("IPV000001.AVI");
        oldnames.add("IPV000002.AVI");
        oldnames.add("IPV0001232212321003.AVI");
        oldnames.add("IPV00002204.AVI");
        oldnames.add("IPV000001.AVI");
        oldnames.add("IPV000002.AVI");
        oldnames.add("IPV0001232212321003.AVI");
        oldnames.add("IPV00002204.AVI");
        oldnames.add("IPV000001.AVI");
        oldnames.add("IPV000002.AVI");
        oldnames.add("IPV0001232212321003.AVI");
        oldnames.add("IPV00002204.AVI");
        oldnames.add("IPV000001.AVI");
        oldnames.add("IPV000002.AVI");
        oldnames.add("IPV0001232212321003.AVI");
        oldnames.add("IPV00002204.AVI");
        return oldnames;
    }

    private ArrayList<String> newNamesArray() {
        ArrayList<String> newNames = new ArrayList<>();
        newNames.add("ISO-23443-RW-3245 Drain 1123123123.AVI");
        newNames.add("ISO-23443-RW-3245 Drain 2ddadfs.AVI");
        newNames.add("ISO-23443-RW-3245 Drain 3123423423423.AVI");
        newNames.add("ISO-23443-RW-3245 Drain 41312.AVI");
        newNames.add("ISO-23443-RW-3245 Drain 1123123123.AVI");
        newNames.add("ISO-23443-RW-3245 Drain 2ddadfs.AVI");
        newNames.add("ISO-23443-RW-3245 Drain 3123423423423.AVI");
        newNames.add("ISO-23443-RW-3245 Drain 41312.AVI");
        newNames.add("ISO-23443-RW-3245 Drain 1123123123.AVI");
        newNames.add("ISO-23443-RW-3245 Drain 2ddadfs.AVI");
        newNames.add("ISO-23443-RW-3245 Drain 3123423423423.AVI");
        newNames.add("ISO-23443-RW-3245 Drain 41312.AVI");
        newNames.add("ISO-23443-RW-3245 Drain 1123123123.AVI");
        newNames.add("ISO-23443-RW-3245 Drain 2ddadfs.AVI");
        newNames.add("ISO-23443-RW-3245 Drain 3123423423423.AVI");
        newNames.add("ISO-23443-RW-3245 Drain 41312.AVI");
        newNames.add("ISO-23443-RW-3245 Drain 1123123123.AVI");
        newNames.add("ISO-23443-RW-3245 Drain 2ddadfs.AVI");
        newNames.add("ISO-23443-RW-3245 Drain 3123423423423.AVI");
        newNames.add("ISO-23443-RW-3245 Drain 41312.AVI");
        newNames.add("ISO-23443-RW-3245 Drain 1123123123.AVI");
        newNames.add("ISO-23443-RW-3245 Drain 2ddadfs.AVI");
        newNames.add("ISO-23443-RW-3245 Drain 3123423423423.AVI");
        newNames.add("ISO-23443-RW-3245 Drain 41312.AVI");
        newNames.add("ISO-23443-RW-3245 Drain 1123123123.AVI");
        newNames.add("ISO-23443-RW-3245 Drain 2ddadfs.AVI");
        newNames.add("ISO-23443-RW-3245 Drain 3123423423423.AVI");
        newNames.add("ISO-23443-RW-3245 Drain 41312.AVI");
        newNames.add("ISO-23443-RW-3245 Drain 1123123123.AVI");
        newNames.add("ISO-23443-RW-3245 Drain 2ddadfs.AVI");
        newNames.add("ISO-23443-RW-3245 Drain 3123423423423.AVI");
        newNames.add("ISO-23443-RW-3245 Drain 41312.AVI");
        newNames.add("ISO-23443-RW-3245 Drain 1123123123.AVI");
        newNames.add("ISO-23443-RW-3245 Drain 2ddadfs.AVI");
        newNames.add("ISO-23443-RW-3245 Drain 3123423423423.AVI");
        newNames.add("ISO-23443-RW-3245 Drain 41312.AVI");
        newNames.add("ISO-23443-RW-3245 Drain 1123123123.AVI");
        newNames.add("ISO-23443-RW-3245 Drain 2ddadfs.AVI");
        newNames.add("ISO-23443-RW-3245 Drain 3123423423423.AVI");
        newNames.add("ISO-23443-RW-3245 Drain 41312.AVI");

        return newNames;
    }
}
